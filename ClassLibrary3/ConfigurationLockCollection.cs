// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

using System.Collections;

namespace System.Configuration
{
    public sealed class ConfigurationLockCollection : IEnumerable, ICollection
    {
        public int Count { get; }
        //
        // Summary:
        //     Gets a value specifying whether the collection is synchronized.
        //
        // Returns:
        //     true if the System.Configuration.ConfigurationLockCollection collection is synchronized;
        //     otherwise, false.
        public bool IsSynchronized { get; }
        //
        // Summary:
        //     Gets an object used to synchronize access to this System.Configuration.ConfigurationLockCollection
        //     collection.
        //
        // Returns:
        //     An object used to synchronize access to this System.Configuration.ConfigurationLockCollection
        //     collection.
        public object SyncRoot { get; }
        //
        // Summary:
        //     Gets a value specifying whether the collection has been modified.
        //
        // Returns:
        //     true if the System.Configuration.ConfigurationLockCollection collection has been
        //     modified; otherwise, false.
        public bool IsModified { get; }
        //
        // Summary:
        //     Gets a list of configuration objects contained in the collection.
        //
        // Returns:
        //     A comma-delimited string that lists the lock configuration objects in the collection.
        public string AttributeList { get; }
        //
        // Summary:
        //     Gets a value specifying whether the collection of locked objects has parent elements.
        //
        // Returns:
        //     true if the System.Configuration.ConfigurationLockCollection collection has parent
        //     elements; otherwise, false.
        public bool HasParentElements { get; }


        //
        // Summary:
        //     Locks a configuration object by adding it to the collection.
        //
        // Parameters:
        //   name:
        //     The name of the configuration object.
        //
        // Exceptions:
        //   T:System.Configuration.ConfigurationErrorsException:
        //     Occurs when the name does not match an existing configuration object within the
        //     collection.
#pragma warning disable CS0626 // Method, operator, or accessor is marked external and has no attributes on it
        public extern void Add(string name);
#pragma warning restore CS0626 // Method, operator, or accessor is marked external and has no attributes on it
        //
        // Summary:
        //     Clears all configuration objects from the collection.
#pragma warning disable CS0626 // Method, operator, or accessor is marked external and has no attributes on it
        public extern void Clear();
#pragma warning restore CS0626 // Method, operator, or accessor is marked external and has no attributes on it
        //
        // Summary:
        //     Verifies whether a specific configuration object is locked.
        //
        // Parameters:
        //   name:
        //     The name of the configuration object to verify.
        //
        // Returns:
        //     true if the System.Configuration.ConfigurationLockCollection contains the specified
        //     configuration object; otherwise, false.
#pragma warning disable CS0626 // Method, operator, or accessor is marked external and has no attributes on it
        public extern bool Contains(string name);
#pragma warning restore CS0626 // Method, operator, or accessor is marked external and has no attributes on it
        //
        // Summary:
        //     Copies the entire System.Configuration.ConfigurationLockCollection collection
        //     to a compatible one-dimensional System.Array, starting at the specified index
        //     of the target array.
        //
        // Parameters:
        //   array:
        //     A one-dimensional System.Array that is the destination of the elements copied
        //     from the System.Configuration.ConfigurationLockCollection. The System.Array must
        //     have zero-based indexing.
        //
        //   index:
        //     The zero-based index in array at which copying begins.
#pragma warning disable CS0626 // Method, operator, or accessor is marked external and has no attributes on it
        public extern void CopyTo(string[] array, int index);
#pragma warning restore CS0626 // Method, operator, or accessor is marked external and has no attributes on it

        public void CopyTo(Array array, int index)
        {
            throw new NotImplementedException();
        }


        //
        // Summary:
        //     Gets an System.Collections.IEnumerator object, which is used to iterate through
        //     this System.Configuration.ConfigurationLockCollection collection.
        //
        // Returns:
        //     An System.Collections.IEnumerator object.
#pragma warning disable CS0626 // Method, operator, or accessor is marked external and has no attributes on it
        public extern IEnumerator GetEnumerator();
#pragma warning restore CS0626 // Method, operator, or accessor is marked external and has no attributes on it
        //
        // Summary:
        //     Verifies whether a specific configuration object is read-only.
        //
        // Parameters:
        //   name:
        //     The name of the configuration object to verify.
        //
        // Returns:
        //     true if the specified configuration object in the System.Configuration.ConfigurationLockCollection
        //     collection is read-only; otherwise, false.
        //
        // Exceptions:
        //   T:System.Configuration.ConfigurationErrorsException:
        //     The specified configuration object is not in the collection.
#pragma warning disable CS0626 // Method, operator, or accessor is marked external and has no attributes on it
        public extern bool IsReadOnly(string name);
#pragma warning restore CS0626 // Method, operator, or accessor is marked external and has no attributes on it
        //
        // Summary:
        //     Removes a configuration object from the collection.
        //
        // Parameters:
        //   name:
        //     The name of the configuration object.
        //
        // Exceptions:
        //   T:System.Configuration.ConfigurationErrorsException:
        //     Occurs when the name does not match an existing configuration object within the
        //     collection.
#pragma warning disable CS0626 // Method, operator, or accessor is marked external and has no attributes on it
        public extern void Remove(string name);
#pragma warning restore CS0626 // Method, operator, or accessor is marked external and has no attributes on it
        //
        // Summary:
        //     Locks a set of configuration objects based on the supplied list.
        //
        // Parameters:
        //   attributeList:
        //     A comma-delimited string.
        //
        // Exceptions:
        //   T:System.Configuration.ConfigurationErrorsException:
        //     Occurs when an item in the attributeList parameter is not a valid lockable configuration
        //     attribute.
#pragma warning disable CS0626 // Method, operator, or accessor is marked external and has no attributes on it
        public extern void SetFromList(string attributeList);
#pragma warning restore CS0626 // Method, operator, or accessor is marked external and has no attributes on it
    }
}